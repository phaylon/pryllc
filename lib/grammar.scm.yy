(require-extension lalr-driver)
(define parser
  (lr-driver
    '#(((*default* -3)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -36)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 34)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (COMMA 33)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_HASH 32)
        (OP_L_OR 31)
        (OP_L_ERR 30)
        (OP_L_AND 29)
        (OP_L_NOT 28)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -43)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (COMMA 42)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 41)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -84))
       ((*default* -85))
       ((*default* -88))
       ((*default* -83) (PARENS_L 48))
       ((*default* -87))
       ((*default* -86))
       ((*default* -82) (OP_ASSIGN_SC -78) (OP_ASSIGN -78))
       ((*default* -52))
       ((*default* *error*) (OP_ASSIGN 50) (OP_ASSIGN_SC 49))
       ((*default* -8)
        (SEMICOLON 68)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* -77))
       ((*default* -80))
       ((*default* -81))
       ((*default* -53) (OP_EQUAL 70))
       ((*default* -2))
       ((*default* *error*) (*eoi* 71))
       ((*default* -64))
       ((*default* -65) (OP_METHOD_REF 51) (OP_METHOD_CALL 52) (OP_H_MATH 53))
       ((*default* -62)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56))
       ((*default* -63))
       ((*default* -15)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -14))
       ((*default* -13))
       ((*default* -12))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -35))
       ((*default* -83) (PARENS_L 48) (COLON -11))
       ((*default* *error*)
        (COLON 73)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* *error*) (BRACE_R 74))
       ((*default* -34) (COMMA 75))
       ((*default* -32))
       ((*default* -31))
       ((*default* *error*) (COLON 76))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -42))
       ((*default* -39)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* *error*) (BRACKET_R 78))
       ((*default* -41) (COMMA 79))
       ((*default* -38))
       ((*default* *error*)
        (PARENS_L 67)
        (PARENS_R 80)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* -27)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 34)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (COMMA 81)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 41)
        (SPLICE_HASH 32)
        (OP_L_OR 31)
        (OP_L_ERR 30)
        (OP_L_AND 29)
        (OP_L_NOT 28)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (BAREWORD 91)
        (LEXVAR 10)
        (OP_L_OR 31)
        (OP_L_ERR 30)
        (OP_L_AND 29)
        (OP_L_NOT 90))
       ((*default* *error*)
        (BAREWORD 91)
        (LEXVAR 10)
        (OP_L_OR 31)
        (OP_L_ERR 30)
        (OP_L_AND 29)
        (OP_L_NOT 90))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -27)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 34)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (COMMA 81)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 41)
        (SPLICE_HASH 32)
        (OP_L_OR 31)
        (OP_L_ERR 30)
        (OP_L_AND 29)
        (OP_L_NOT 28)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -7)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -4))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -19)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -37))
       ((*default* -36)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 34)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (COMMA 33)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_HASH 32)
        (OP_L_OR 31)
        (OP_L_ERR 30)
        (OP_L_AND 29)
        (OP_L_NOT 28)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -18)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* -44))
       ((*default* -43)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (COMMA 42)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 41)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -79))
       ((*default* -26))
       ((*default* -23)
        (COLON 73)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* *error*) (PARENS_R 117))
       ((*default* -25) (COMMA 118))
       ((*default* -22))
       ((*default* -21))
       ((*default* -20))
       ((*default* -61)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58)
        (OP_H_AND 59)
        (OP_H_ERR 60)
        (OP_H_OR 61)
        (OP_TERN_THEN 62))
       ((*default* -60)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58)
        (OP_H_AND 59)
        (OP_H_ERR 60)
        (OP_H_OR 61)
        (OP_TERN_THEN 62))
       ((*default* -15))
       ((*default* -11))
       ((*default* -46))
       ((*default* -48) (QMARK 119))
       ((*default* -45))
       ((*default* -48) (QMARK 119))
       ((*default* -66) (OP_METHOD_REF 51) (OP_METHOD_CALL 52))
       ((*default* -67) (OP_METHOD_REF 51) (OP_METHOD_CALL 52) (OP_H_MATH 53))
       ((*default* -68) (OP_METHOD_REF 51) (OP_METHOD_CALL 52) (OP_H_MATH 53))
       ((*default* -69)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55))
       ((*default* -70)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56))
       ((*default* -10)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56))
       ((*default* -71)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58))
       ((*default* -73)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58)
        (OP_H_AND 59))
       ((*default* -72)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58)
        (OP_H_AND 59))
       ((*default* *error*)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_TERN_ELSE 122)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* -74)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58)
        (OP_H_AND 59)
        (OP_H_ERR 60)
        (OP_H_OR 61)
        (OP_TERN_THEN 62))
       ((*default* -76)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58)
        (OP_H_AND 59)
        (OP_H_ERR 60)
        (OP_H_OR 61)
        (OP_TERN_THEN 62)
        (OP_L_AND 63))
       ((*default* -75)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58)
        (OP_H_AND 59)
        (OP_H_ERR 60)
        (OP_H_OR 61)
        (OP_TERN_THEN 62)
        (OP_L_AND 63))
       ((*default* *error*)
        (PARENS_L 67)
        (BRACKET_L 66)
        (BRACKET_R 123)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* *error*) (PARENS_R 124))
       ((*default* -8)
        (SEMICOLON 68)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* -9)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56))
       ((*default* -17)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* -33))
       ((*default* -16)
        (PARENS_L 67)
        (BRACKET_L 66)
        (OP_L_OR 65)
        (OP_L_ERR 64)
        (OP_L_AND 63)
        (OP_TERN_THEN 62)
        (OP_H_OR 61)
        (OP_H_ERR 60)
        (OP_H_AND 59)
        (OP_EQUAL 58)
        (OP_COMPARE 57)
        (OP_CONCAT 56)
        (OP_PLUS 55)
        (OP_MINUS 54)
        (OP_H_MATH 53)
        (OP_METHOD_CALL 52)
        (OP_METHOD_REF 51))
       ((*default* -40))
       ((*default* -57))
       ((*default* -27)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 34)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (COMMA 81)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 41)
        (SPLICE_HASH 32)
        (OP_L_OR 31)
        (OP_L_ERR 30)
        (OP_L_AND 29)
        (OP_L_NOT 28)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -47))
       ((*default* -29) (PARENS_L 127))
       ((*default* -50) (EMARK 129))
       ((*default* *error*)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 11)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -54) (OP_ASSIGN_SC -51) (OP_ASSIGN -51))
       ((*default* -58))
       ((*default* -6))
       ((*default* -24))
       ((*default* -27)
        (INT 13)
        (FLOAT 12)
        (BAREWORD 34)
        (LEXVAR 10)
        (STRING_SINGLE 9)
        (STRING_DOUBLE 8)
        (COMMA 81)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 41)
        (SPLICE_HASH 32)
        (OP_L_OR 31)
        (OP_L_ERR 30)
        (OP_L_AND 29)
        (OP_L_NOT 28)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -55))
       ((*default* -49))
       ((*default* -29) (PARENS_L 127))
       ((*default* -59)
        (OP_METHOD_REF 51)
        (OP_METHOD_CALL 52)
        (OP_H_MATH 53)
        (OP_MINUS 54)
        (OP_PLUS 55)
        (OP_CONCAT 56)
        (OP_COMPARE 57)
        (OP_EQUAL 58)
        (OP_H_AND 59)
        (OP_H_ERR 60)
        (OP_H_OR 61)
        (OP_TERN_THEN 62))
       ((*default* *error*) (PARENS_R 134))
       ((*default* -56))
       ((*default* -28)))
    (vector
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 17)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21)
        (2 . 22)
        (1 . 23))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 24)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 25)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 26)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 27)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 35)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (14 . 36)
        (13 . 37)
        (8 . 38)
        (6 . 39)
        (5 . 40)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 43)
        (22 . 18)
        (18 . 19)
        (17 . 44)
        (16 . 45)
        (15 . 20)
        (7 . 46)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 47)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 69))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 27)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '()
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 72)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 77)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '()
      '()
      '()
      '()
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 82)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (10 . 83)
        (9 . 84)
        (8 . 85)
        (7 . 86)
        (6 . 87)
        (5 . 40)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 88)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 89)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 92) (19 . 93) (5 . 94))
      '((26 . 92) (19 . 95) (5 . 94))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 96)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 97)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 98)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 99)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 100)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 101)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 102)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 103)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 104)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 105)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 106)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 107)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 108)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 109)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 82)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (10 . 110)
        (9 . 84)
        (8 . 85)
        (7 . 86)
        (6 . 87)
        (5 . 40)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 111)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 112)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 113)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 35)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (14 . 114)
        (13 . 37)
        (8 . 38)
        (6 . 39)
        (5 . 40)
        (4 . 21))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 115)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 43)
        (22 . 18)
        (18 . 19)
        (17 . 116)
        (16 . 45)
        (15 . 20)
        (7 . 46)
        (4 . 21))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((20 . 120))
      '()
      '((20 . 121))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 125))
      '()
      '()
      '()
      '()
      '()
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 82)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (10 . 126)
        (9 . 84)
        (8 . 85)
        (7 . 86)
        (6 . 87)
        (5 . 40)
        (4 . 21))
      '()
      '((11 . 128))
      '((21 . 130))
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 131)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (4 . 21))
      '()
      '()
      '()
      '()
      '((26 . 14)
        (25 . 15)
        (24 . 16)
        (23 . 82)
        (22 . 18)
        (18 . 19)
        (15 . 20)
        (10 . 132)
        (9 . 84)
        (8 . 85)
        (7 . 86)
        (6 . 87)
        (5 . 40)
        (4 . 21))
      '()
      '()
      '((11 . 133))
      '()
      '()
      '()
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 1 (make-document $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 1 (make-document '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 2 (cons (make-statement $1) $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 2 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (cons (make-statement $2) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (combine-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 (identifier->string $1) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 7 (make-array-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 8 (make-hash-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 10 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 10 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 11 (make-arguments $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 11 (make-arguments '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 12 (make-arguments $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 13 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 13 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 14 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 14 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 14 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 14 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-hash $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 16 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 16 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 17 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 17 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 17 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 17 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-array $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 19 (identifier->string $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 19 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 20 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 20 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 21 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 21 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 22 (make-slot-ref $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 23 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 23 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 23 (make-slot-ref $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 23 (make-method-ref $2 $1 $3 $4 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($6 (vector-ref ___stack (- ___sp 1)))
               ($5 (vector-ref ___stack (- ___sp 3)))
               ($4 (vector-ref ___stack (- ___sp 5)))
               ($3 (vector-ref ___stack (- ___sp 7)))
               ($2 (vector-ref ___stack (- ___sp 9)))
               ($1 (vector-ref ___stack (- ___sp 11))))
          (___push 6 23 (make-method-call $2 $1 $3 $4 $5 $6))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 23 (make-function-call $1 (make-arguments $3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 23 (make-call $2 $1 (make-arguments $3)))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 23 (make-ternary-operator $2 $1 $3 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-assign $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-assign/sc $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 23 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 23 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 23 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 23 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 24 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 24 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 25 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 25 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 25 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 25 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 25 (make-bareword $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 25 (make-string-double $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 25 (make-string-single $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 25 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 25 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 26 (make-lexical-variable $1)))))))

