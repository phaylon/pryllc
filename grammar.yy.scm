(require-extension lalr-driver)
(define parser
  (lr-driver
    '#(((*default* -3)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* -29))
       ((*default* -26))
       ((*default* -28))
       ((*default* -27))
       ((*default* -25) (OP_ASSIGN_SC -23) (OP_ASSIGN -23))
       ((*default* -11))
       ((*default* *error*) (OP_ASSIGN 17) (OP_ASSIGN_SC 16))
       ((*default* -8)
        (SEMICOLON 26)
        (OP_L_OR 25)
        (OP_L_ERR 24)
        (OP_L_AND 23)
        (OP_TERN_THEN 22)
        (OP_H_OR 21)
        (OP_H_ERR 20)
        (OP_H_AND 19)
        (OP_EQUAL 18))
       ((*default* -12) (OP_EQUAL 28))
       ((*default* -2))
       ((*default* *error*) (*eoi* 29))
       ((*default* -16)
        (OP_EQUAL 18)
        (OP_H_AND 19)
        (OP_H_ERR 20)
        (OP_H_OR 21)
        (OP_TERN_THEN 22))
       ((*default* *error*)
        (PARENS_R 30)
        (OP_L_OR 25)
        (OP_L_ERR 24)
        (OP_L_AND 23)
        (OP_TERN_THEN 22)
        (OP_H_OR 21)
        (OP_H_ERR 20)
        (OP_H_AND 19)
        (OP_EQUAL 18))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* -7)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* -4))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -24))
       ((*default* -15)
        (OP_EQUAL 18)
        (OP_H_AND 19)
        (OP_H_ERR 20)
        (OP_H_OR 21)
        (OP_TERN_THEN 22))
       ((*default* -14)
        (OP_EQUAL 18)
        (OP_H_AND 19)
        (OP_H_ERR 20)
        (OP_H_OR 21)
        (OP_TERN_THEN 22))
       ((*default* -10))
       ((*default* -17) (OP_EQUAL 18))
       ((*default* -19) (OP_EQUAL 18) (OP_H_AND 19))
       ((*default* -18) (OP_EQUAL 18) (OP_H_AND 19))
       ((*default* *error*)
        (OP_L_OR 25)
        (OP_L_ERR 24)
        (OP_L_AND 23)
        (OP_TERN_THEN 22)
        (OP_TERN_ELSE 43)
        (OP_H_OR 21)
        (OP_H_ERR 20)
        (OP_H_AND 19)
        (OP_EQUAL 18))
       ((*default* -20)
        (OP_EQUAL 18)
        (OP_H_AND 19)
        (OP_H_ERR 20)
        (OP_H_OR 21)
        (OP_TERN_THEN 22))
       ((*default* -22)
        (OP_EQUAL 18)
        (OP_H_AND 19)
        (OP_H_ERR 20)
        (OP_H_OR 21)
        (OP_TERN_THEN 22)
        (OP_L_AND 23))
       ((*default* -21)
        (OP_EQUAL 18)
        (OP_H_AND 19)
        (OP_H_ERR 20)
        (OP_H_OR 21)
        (OP_TERN_THEN 22)
        (OP_L_AND 23))
       ((*default* -8)
        (SEMICOLON 26)
        (OP_L_OR 25)
        (OP_L_ERR 24)
        (OP_L_AND 23)
        (OP_TERN_THEN 22)
        (OP_H_OR 21)
        (OP_H_ERR 20)
        (OP_H_AND 19)
        (OP_EQUAL 18))
       ((*default* -9))
       ((*default* *error*)
        (INT 6)
        (FLOAT 5)
        (BAREWORD 4)
        (LEXVAR 3)
        (PARENS_L 2)
        (OP_L_NOT 1))
       ((*default* -6))
       ((*default* -13)
        (OP_EQUAL 18)
        (OP_H_AND 19)
        (OP_H_ERR 20)
        (OP_H_OR 21)
        (OP_TERN_THEN 22)))
    (vector
      '((8 . 7) (7 . 8) (6 . 9) (5 . 10) (4 . 11) (2 . 12) (1 . 13))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 14) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 15) (4 . 11))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 27))
      '()
      '()
      '()
      '()
      '()
      '((8 . 7) (7 . 8) (6 . 9) (5 . 31) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 32) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 33) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 34) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 35) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 36) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 37) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 38) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 39) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 40) (4 . 11))
      '((8 . 7) (7 . 8) (6 . 9) (5 . 41) (4 . 11))
      '()
      '((8 . 7) (7 . 8) (6 . 9) (5 . 42) (4 . 11))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 44))
      '()
      '((8 . 7) (7 . 8) (6 . 9) (5 . 45) (4 . 11))
      '()
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 1 (make-document $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 1 (make-document '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 2 (cons (make-statement $1) $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 2 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (cons (make-statement $2) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (combine-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 5 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 5 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 5 (make-ternary-operator $2 $1 $3 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 (make-assign $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 (make-assign/sc $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 5 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 5 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 6 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 7 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 7 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 7 (make-bareword $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 7 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 7 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 8 (make-lexical-variable $1)))))))

