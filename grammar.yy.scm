(require-extension lalr-driver)
(define parser
  (lr-driver
    '#(((*default* -3)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -35)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 32)
        (LEXVAR 8)
        (COMMA 31)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_HASH 30)
        (OP_L_OR 29)
        (OP_L_ERR 28)
        (OP_L_AND 27)
        (OP_L_NOT 26)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -42)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (COMMA 40)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 39)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -83))
       ((*default* -80))
       ((*default* -82))
       ((*default* -81))
       ((*default* -79) (OP_ASSIGN_SC -75) (OP_ASSIGN -75))
       ((*default* -51))
       ((*default* *error*) (OP_ASSIGN 47) (OP_ASSIGN_SC 46))
       ((*default* -8)
        (SEMICOLON 64)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* -74))
       ((*default* -77))
       ((*default* -78))
       ((*default* -52) (OP_EQUAL 66))
       ((*default* -2))
       ((*default* *error*) (*eoi* 67))
       ((*default* -61))
       ((*default* -62) (OP_METHOD_REF 48) (OP_METHOD_CALL 49) (OP_H_MATH 50))
       ((*default* -59)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53))
       ((*default* -60))
       ((*default* -15)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -14))
       ((*default* -13))
       ((*default* -12))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -34))
       ((*default* -80) (COLON -11))
       ((*default* *error*)
        (COLON 69)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* *error*) (BRACE_R 70))
       ((*default* -33) (COMMA 71))
       ((*default* -31))
       ((*default* -30))
       ((*default* *error*) (COLON 72))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -41))
       ((*default* -38)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* *error*) (BRACKET_R 74))
       ((*default* -40) (COMMA 75))
       ((*default* -37))
       ((*default* *error*)
        (PARENS_R 76)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (BAREWORD 80)
        (LEXVAR 8)
        (OP_L_OR 29)
        (OP_L_ERR 28)
        (OP_L_AND 27)
        (OP_L_NOT 79))
       ((*default* *error*)
        (BAREWORD 80)
        (LEXVAR 8)
        (OP_L_OR 29)
        (OP_L_ERR 28)
        (OP_L_AND 27)
        (OP_L_NOT 79))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -7)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -4))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -19)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -36))
       ((*default* -35)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 32)
        (LEXVAR 8)
        (COMMA 31)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_HASH 30)
        (OP_L_OR 29)
        (OP_L_ERR 28)
        (OP_L_AND 27)
        (OP_L_NOT 26)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -18)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* -43))
       ((*default* -42)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (COMMA 40)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 39)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -76))
       ((*default* -58)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55)
        (OP_H_AND 56)
        (OP_H_ERR 57)
        (OP_H_OR 58)
        (OP_TERN_THEN 59))
       ((*default* -57)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55)
        (OP_H_AND 56)
        (OP_H_ERR 57)
        (OP_H_OR 58)
        (OP_TERN_THEN 59))
       ((*default* -15))
       ((*default* -11))
       ((*default* -45))
       ((*default* -47) (QMARK 105))
       ((*default* -44))
       ((*default* -47) (QMARK 105))
       ((*default* -63) (OP_METHOD_REF 48) (OP_METHOD_CALL 49))
       ((*default* -64) (OP_METHOD_REF 48) (OP_METHOD_CALL 49) (OP_H_MATH 50))
       ((*default* -65) (OP_METHOD_REF 48) (OP_METHOD_CALL 49) (OP_H_MATH 50))
       ((*default* -66)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52))
       ((*default* -67)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53))
       ((*default* -10)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53))
       ((*default* -68)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55))
       ((*default* -70)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55)
        (OP_H_AND 56))
       ((*default* -69)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55)
        (OP_H_AND 56))
       ((*default* *error*)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_TERN_ELSE 108)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* -71)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55)
        (OP_H_AND 56)
        (OP_H_ERR 57)
        (OP_H_OR 58)
        (OP_TERN_THEN 59))
       ((*default* -73)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55)
        (OP_H_AND 56)
        (OP_H_ERR 57)
        (OP_H_OR 58)
        (OP_TERN_THEN 59)
        (OP_L_AND 60))
       ((*default* -72)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55)
        (OP_H_AND 56)
        (OP_H_ERR 57)
        (OP_H_OR 58)
        (OP_TERN_THEN 59)
        (OP_L_AND 60))
       ((*default* *error*)
        (BRACKET_L 63)
        (BRACKET_R 109)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* -8)
        (SEMICOLON 64)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* -9)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53))
       ((*default* -17)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* -32))
       ((*default* -16)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* -39))
       ((*default* -46))
       ((*default* -29) (PARENS_L 111))
       ((*default* -49) (EMARK 113))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -53) (OP_ASSIGN_SC -50) (OP_ASSIGN -50))
       ((*default* -6))
       ((*default* -27)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 32)
        (LEXVAR 8)
        (COMMA 116)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 39)
        (SPLICE_HASH 30)
        (OP_L_OR 29)
        (OP_L_ERR 28)
        (OP_L_AND 27)
        (OP_L_NOT 26)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -54))
       ((*default* -48))
       ((*default* -29) (PARENS_L 111))
       ((*default* -56)
        (OP_METHOD_REF 48)
        (OP_METHOD_CALL 49)
        (OP_H_MATH 50)
        (OP_MINUS 51)
        (OP_PLUS 52)
        (OP_CONCAT 53)
        (OP_COMPARE 54)
        (OP_EQUAL 55)
        (OP_H_AND 56)
        (OP_H_ERR 57)
        (OP_H_OR 58)
        (OP_TERN_THEN 59))
       ((*default* -26))
       ((*default* -23)
        (COLON 69)
        (BRACKET_L 63)
        (OP_L_OR 62)
        (OP_L_ERR 61)
        (OP_L_AND 60)
        (OP_TERN_THEN 59)
        (OP_H_OR 58)
        (OP_H_ERR 57)
        (OP_H_AND 56)
        (OP_EQUAL 55)
        (OP_COMPARE 54)
        (OP_CONCAT 53)
        (OP_PLUS 52)
        (OP_MINUS 51)
        (OP_H_MATH 50)
        (OP_METHOD_CALL 49)
        (OP_METHOD_REF 48))
       ((*default* *error*) (PARENS_R 124))
       ((*default* -25) (COMMA 125))
       ((*default* -22))
       ((*default* -21))
       ((*default* -20))
       ((*default* -55))
       ((*default* -28))
       ((*default* -27)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 32)
        (LEXVAR 8)
        (COMMA 116)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 39)
        (SPLICE_HASH 30)
        (OP_L_OR 29)
        (OP_L_ERR 28)
        (OP_L_AND 27)
        (OP_L_NOT 26)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -24)))
    (vector
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 15)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19)
        (2 . 20)
        (1 . 21))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 22)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 23)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 24)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 25)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 33)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (13 . 34)
        (12 . 35)
        (8 . 36)
        (6 . 37)
        (5 . 38)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 41)
        (21 . 16)
        (17 . 17)
        (16 . 42)
        (15 . 43)
        (14 . 18)
        (7 . 44)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 45)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 65))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 25)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '()
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 68)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 73)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '()
      '()
      '()
      '()
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 77)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 78)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 81) (18 . 82) (5 . 83))
      '((25 . 81) (18 . 84) (5 . 83))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 85)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 86)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 87)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 88)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 89)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 90)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 91)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 92)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 93)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 94)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 95)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 96)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 97)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 98)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 99)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 100)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 101)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 33)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (13 . 102)
        (12 . 35)
        (8 . 36)
        (6 . 37)
        (5 . 38)
        (4 . 19))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 103)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 41)
        (21 . 16)
        (17 . 17)
        (16 . 104)
        (15 . 43)
        (14 . 18)
        (7 . 44)
        (4 . 19))
      '()
      '()
      '()
      '()
      '()
      '()
      '((19 . 106))
      '()
      '((19 . 107))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 110))
      '()
      '()
      '()
      '()
      '()
      '()
      '((11 . 112))
      '((20 . 114))
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 115)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (4 . 19))
      '()
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 117)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (10 . 118)
        (9 . 119)
        (8 . 120)
        (7 . 121)
        (6 . 122)
        (5 . 38)
        (4 . 19))
      '()
      '()
      '((11 . 123))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((25 . 12)
        (24 . 13)
        (23 . 14)
        (22 . 117)
        (21 . 16)
        (17 . 17)
        (14 . 18)
        (10 . 126)
        (9 . 119)
        (8 . 120)
        (7 . 121)
        (6 . 122)
        (5 . 38)
        (4 . 19))
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 1 (make-document $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 1 (make-document '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 2 (cons (make-statement $1) $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 2 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (cons (make-statement $2) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (combine-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 (identifier->string $1) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 7 (make-array-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 8 (make-hash-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 10 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 10 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 11 (make-arguments $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 11 (make-arguments '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 12 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 12 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 13 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 13 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 13 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 13 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 14 (make-hash $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 15 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 15 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 16 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 16 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 16 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 16 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 17 (make-array $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 18 (identifier->string $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 18 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 19 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 19 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 20 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 20 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 21 (make-slot-ref $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 22 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 22 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 22 (make-slot-ref $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 22 (make-method-ref $2 $1 $3 $4 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($6 (vector-ref ___stack (- ___sp 1)))
               ($5 (vector-ref ___stack (- ___sp 3)))
               ($4 (vector-ref ___stack (- ___sp 5)))
               ($3 (vector-ref ___stack (- ___sp 7)))
               ($2 (vector-ref ___stack (- ___sp 9)))
               ($1 (vector-ref ___stack (- ___sp 11))))
          (___push 6 22 (make-method-call $2 $1 $3 $4 $5 $6))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 22 (make-ternary-operator $2 $1 $3 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-assign $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-assign/sc $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 22 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 22 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 22 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 22 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 22 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 23 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 23 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 24 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 24 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 24 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 24 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 24 (make-bareword $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 24 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 24 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 25 (make-lexical-variable $1)))))))

