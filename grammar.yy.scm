(require-extension lalr-driver)
(define parser
  (lr-driver
    '#(((*default* -3)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -35)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 31)
        (LEXVAR 8)
        (COMMA 30)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_HASH 29)
        (OP_L_OR 28)
        (OP_L_ERR 27)
        (OP_L_AND 26)
        (OP_L_NOT 25)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -42)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (COMMA 39)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 38)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -80))
       ((*default* -77))
       ((*default* -79))
       ((*default* -78))
       ((*default* -76) (OP_ASSIGN_SC -72) (OP_ASSIGN -72))
       ((*default* -50))
       ((*default* *error*) (OP_ASSIGN 46) (OP_ASSIGN_SC 45))
       ((*default* -8)
        (SEMICOLON 62)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* -74))
       ((*default* -75))
       ((*default* -51) (OP_EQUAL 64))
       ((*default* -2))
       ((*default* *error*) (*eoi* 65))
       ((*default* -59) (OP_METHOD_REF 47) (OP_METHOD_CALL 48))
       ((*default* -60) (OP_METHOD_REF 47) (OP_METHOD_CALL 48) (OP_H_MATH 49))
       ((*default* -57)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52))
       ((*default* -58) (OP_METHOD_REF 47) (OP_METHOD_CALL 48))
       ((*default* -15)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -14))
       ((*default* -13))
       ((*default* -12))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -34))
       ((*default* -77) (COLON -11))
       ((*default* *error*)
        (COLON 67)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* *error*) (BRACE_R 68))
       ((*default* -33) (COMMA 69))
       ((*default* -31))
       ((*default* -30))
       ((*default* *error*) (COLON 70))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -41))
       ((*default* -38)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* *error*) (BRACKET_R 72))
       ((*default* -40) (COMMA 73))
       ((*default* -37))
       ((*default* *error*)
        (PARENS_R 74)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (BAREWORD 78)
        (LEXVAR 8)
        (OP_L_OR 28)
        (OP_L_ERR 27)
        (OP_L_AND 26)
        (OP_L_NOT 77))
       ((*default* *error*)
        (BAREWORD 78)
        (LEXVAR 8)
        (OP_L_OR 28)
        (OP_L_ERR 27)
        (OP_L_AND 26)
        (OP_L_NOT 77))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -7)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -4))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -19)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -36))
       ((*default* -35)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 31)
        (LEXVAR 8)
        (COMMA 30)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_HASH 29)
        (OP_L_OR 28)
        (OP_L_ERR 27)
        (OP_L_AND 26)
        (OP_L_NOT 25)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -18)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* -43))
       ((*default* -42)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (COMMA 39)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 38)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -73))
       ((*default* -56)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54)
        (OP_H_AND 55)
        (OP_H_ERR 56)
        (OP_H_OR 57)
        (OP_TERN_THEN 58))
       ((*default* -55)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54)
        (OP_H_AND 55)
        (OP_H_ERR 56)
        (OP_H_OR 57)
        (OP_TERN_THEN 58))
       ((*default* -15))
       ((*default* -11))
       ((*default* -45))
       ((*default* -47) (QMARK 102))
       ((*default* -44))
       ((*default* -47) (QMARK 102))
       ((*default* -61) (OP_METHOD_REF 47) (OP_METHOD_CALL 48))
       ((*default* -62) (OP_METHOD_REF 47) (OP_METHOD_CALL 48) (OP_H_MATH 49))
       ((*default* -63) (OP_METHOD_REF 47) (OP_METHOD_CALL 48) (OP_H_MATH 49))
       ((*default* -64)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51))
       ((*default* -65)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52))
       ((*default* -10)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52))
       ((*default* -66)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54))
       ((*default* -68)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54)
        (OP_H_AND 55))
       ((*default* -67)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54)
        (OP_H_AND 55))
       ((*default* *error*)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_TERN_ELSE 105)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* -69)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54)
        (OP_H_AND 55)
        (OP_H_ERR 56)
        (OP_H_OR 57)
        (OP_TERN_THEN 58))
       ((*default* -71)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54)
        (OP_H_AND 55)
        (OP_H_ERR 56)
        (OP_H_OR 57)
        (OP_TERN_THEN 58)
        (OP_L_AND 59))
       ((*default* -70)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54)
        (OP_H_AND 55)
        (OP_H_ERR 56)
        (OP_H_OR 57)
        (OP_TERN_THEN 58)
        (OP_L_AND 59))
       ((*default* -8)
        (SEMICOLON 62)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* -9)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52))
       ((*default* -17)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* -32))
       ((*default* -16)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* -39))
       ((*default* -46))
       ((*default* -29) (PARENS_L 107))
       ((*default* -49) (EMARK 109))
       ((*default* *error*)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 9)
        (LEXVAR 8)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -6))
       ((*default* -27)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 31)
        (LEXVAR 8)
        (COMMA 112)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 38)
        (SPLICE_HASH 29)
        (OP_L_OR 28)
        (OP_L_ERR 27)
        (OP_L_AND 26)
        (OP_L_NOT 25)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -52))
       ((*default* -48))
       ((*default* -29) (PARENS_L 107))
       ((*default* -54)
        (OP_METHOD_REF 47)
        (OP_METHOD_CALL 48)
        (OP_H_MATH 49)
        (OP_MINUS 50)
        (OP_PLUS 51)
        (OP_CONCAT 52)
        (OP_COMPARE 53)
        (OP_EQUAL 54)
        (OP_H_AND 55)
        (OP_H_ERR 56)
        (OP_H_OR 57)
        (OP_TERN_THEN 58))
       ((*default* -26))
       ((*default* -23)
        (COLON 67)
        (OP_L_OR 61)
        (OP_L_ERR 60)
        (OP_L_AND 59)
        (OP_TERN_THEN 58)
        (OP_H_OR 57)
        (OP_H_ERR 56)
        (OP_H_AND 55)
        (OP_EQUAL 54)
        (OP_COMPARE 53)
        (OP_CONCAT 52)
        (OP_PLUS 51)
        (OP_MINUS 50)
        (OP_H_MATH 49)
        (OP_METHOD_CALL 48)
        (OP_METHOD_REF 47))
       ((*default* *error*) (PARENS_R 120))
       ((*default* -25) (COMMA 121))
       ((*default* -22))
       ((*default* -21))
       ((*default* -20))
       ((*default* -53))
       ((*default* -28))
       ((*default* -27)
        (INT 11)
        (FLOAT 10)
        (BAREWORD 31)
        (LEXVAR 8)
        (COMMA 112)
        (PARENS_L 7)
        (BRACKET_L 6)
        (BRACE_L 5)
        (SPLICE_ARRAY 38)
        (SPLICE_HASH 29)
        (OP_L_OR 28)
        (OP_L_ERR 27)
        (OP_L_AND 26)
        (OP_L_NOT 25)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -24)))
    (vector
      '((24 . 12)
        (23 . 13)
        (22 . 14)
        (21 . 15)
        (17 . 16)
        (14 . 17)
        (4 . 18)
        (2 . 19)
        (1 . 20))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 21) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 22) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 23) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 24) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12)
        (23 . 13)
        (22 . 14)
        (21 . 32)
        (17 . 16)
        (14 . 17)
        (13 . 33)
        (12 . 34)
        (8 . 35)
        (6 . 36)
        (5 . 37)
        (4 . 18))
      '((24 . 12)
        (23 . 13)
        (22 . 14)
        (21 . 40)
        (17 . 16)
        (16 . 41)
        (15 . 42)
        (14 . 17)
        (7 . 43)
        (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 44) (17 . 16) (14 . 17) (4 . 18))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 63))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((24 . 12) (23 . 13) (22 . 14) (21 . 24) (17 . 16) (14 . 17) (4 . 18))
      '()
      '()
      '()
      '((24 . 12) (23 . 13) (22 . 14) (21 . 66) (17 . 16) (14 . 17) (4 . 18))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((24 . 12) (23 . 13) (22 . 14) (21 . 71) (17 . 16) (14 . 17) (4 . 18))
      '()
      '()
      '()
      '()
      '()
      '()
      '((24 . 12) (23 . 13) (22 . 14) (21 . 75) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 76) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 79) (18 . 80) (5 . 81))
      '((24 . 79) (18 . 82) (5 . 81))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 83) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 84) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 85) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 86) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 87) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 88) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 89) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 90) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 91) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 92) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 93) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 94) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 95) (17 . 16) (14 . 17) (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 96) (17 . 16) (14 . 17) (4 . 18))
      '()
      '((24 . 12) (23 . 13) (22 . 14) (21 . 97) (17 . 16) (14 . 17) (4 . 18))
      '()
      '()
      '((24 . 12) (23 . 13) (22 . 14) (21 . 98) (17 . 16) (14 . 17) (4 . 18))
      '()
      '((24 . 12)
        (23 . 13)
        (22 . 14)
        (21 . 32)
        (17 . 16)
        (14 . 17)
        (13 . 99)
        (12 . 34)
        (8 . 35)
        (6 . 36)
        (5 . 37)
        (4 . 18))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 100) (17 . 16) (14 . 17) (4 . 18))
      '()
      '()
      '((24 . 12)
        (23 . 13)
        (22 . 14)
        (21 . 40)
        (17 . 16)
        (16 . 101)
        (15 . 42)
        (14 . 17)
        (7 . 43)
        (4 . 18))
      '()
      '()
      '()
      '()
      '()
      '()
      '((19 . 103))
      '()
      '((19 . 104))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 106))
      '()
      '()
      '()
      '()
      '()
      '()
      '((11 . 108))
      '((20 . 110))
      '((24 . 12) (23 . 13) (22 . 14) (21 . 111) (17 . 16) (14 . 17) (4 . 18))
      '()
      '((24 . 12)
        (23 . 13)
        (22 . 14)
        (21 . 113)
        (17 . 16)
        (14 . 17)
        (10 . 114)
        (9 . 115)
        (8 . 116)
        (7 . 117)
        (6 . 118)
        (5 . 37)
        (4 . 18))
      '()
      '()
      '((11 . 119))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((24 . 12)
        (23 . 13)
        (22 . 14)
        (21 . 113)
        (17 . 16)
        (14 . 17)
        (10 . 122)
        (9 . 115)
        (8 . 116)
        (7 . 117)
        (6 . 118)
        (5 . 37)
        (4 . 18))
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 1 (make-document $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 1 (make-document '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 2 (cons (make-statement $1) $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 2 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (cons (make-statement $2) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (combine-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 (identifier->string $1) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 7 (make-array-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 8 (make-hash-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 10 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 10 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 11 (make-arguments $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 11 (make-arguments '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 12 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 12 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 13 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 13 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 13 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 13 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 14 (make-hash $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 15 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 15 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 16 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 16 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 16 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 16 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 17 (make-array $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 18 (identifier->string $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 18 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 19 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 19 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 20 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 20 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 21 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 21 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 21 (make-method-ref $2 $1 $3 $4 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($6 (vector-ref ___stack (- ___sp 1)))
               ($5 (vector-ref ___stack (- ___sp 3)))
               ($4 (vector-ref ___stack (- ___sp 5)))
               ($3 (vector-ref ___stack (- ___sp 7)))
               ($2 (vector-ref ___stack (- ___sp 9)))
               ($1 (vector-ref ___stack (- ___sp 11))))
          (___push 6 21 (make-method-call $2 $1 $3 $4 $5 $6))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 21 (make-ternary-operator $2 $1 $3 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-assign $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-assign/sc $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 21 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 21 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 21 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 21 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 21 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 22 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 23 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 23 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 23 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 23 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 23 (make-bareword $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 23 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 23 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 24 (make-lexical-variable $1)))))))

