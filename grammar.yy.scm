(require-extension lalr-driver)
(define parser
  (lr-driver
    '#(((*default* -3)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -35)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (COMMA 24)
        (PARENS_L 6)
        (BRACKET_L 5)
        (SPLICE_ARRAY 23)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -72))
       ((*default* -69))
       ((*default* -71))
       ((*default* -70))
       ((*default* -68) (OP_ASSIGN_SC -65) (OP_ASSIGN -65))
       ((*default* -43))
       ((*default* *error*) (OP_ASSIGN 31) (OP_ASSIGN_SC 30))
       ((*default* -8)
        (SEMICOLON 47)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* -67))
       ((*default* -44) (OP_EQUAL 49))
       ((*default* -2))
       ((*default* *error*) (*eoi* 50))
       ((*default* -52) (OP_METHOD_REF 32) (OP_METHOD_CALL 33))
       ((*default* -53) (OP_METHOD_REF 32) (OP_METHOD_CALL 33) (OP_H_MATH 34))
       ((*default* -50)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37))
       ((*default* -51) (OP_METHOD_REF 32) (OP_METHOD_CALL 33))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -34))
       ((*default* -31)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* *error*) (BRACKET_R 52))
       ((*default* -33) (COMMA 53))
       ((*default* -30))
       ((*default* *error*)
        (PARENS_R 54)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (BAREWORD 61)
        (LEXVAR 7)
        (OP_L_OR 60)
        (OP_L_ERR 59)
        (OP_L_AND 58)
        (OP_L_NOT 57))
       ((*default* *error*)
        (BAREWORD 61)
        (LEXVAR 7)
        (OP_L_OR 60)
        (OP_L_ERR 59)
        (OP_L_AND 58)
        (OP_L_NOT 57))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -7)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -4))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -18)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* -36))
       ((*default* -35)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (COMMA 24)
        (PARENS_L 6)
        (BRACKET_L 5)
        (SPLICE_ARRAY 23)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -66))
       ((*default* -49)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39)
        (OP_H_AND 40)
        (OP_H_ERR 41)
        (OP_H_OR 42)
        (OP_TERN_THEN 43))
       ((*default* -48)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39)
        (OP_H_AND 40)
        (OP_H_ERR 41)
        (OP_H_OR 42)
        (OP_TERN_THEN 43))
       ((*default* -15))
       ((*default* -14))
       ((*default* -13))
       ((*default* -12))
       ((*default* -11))
       ((*default* -38))
       ((*default* -40) (QMARK 82))
       ((*default* -37))
       ((*default* -40) (QMARK 82))
       ((*default* -54) (OP_METHOD_REF 32) (OP_METHOD_CALL 33))
       ((*default* -55) (OP_METHOD_REF 32) (OP_METHOD_CALL 33) (OP_H_MATH 34))
       ((*default* -56) (OP_METHOD_REF 32) (OP_METHOD_CALL 33) (OP_H_MATH 34))
       ((*default* -57)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36))
       ((*default* -58)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37))
       ((*default* -10)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37))
       ((*default* -59)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39))
       ((*default* -61)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39)
        (OP_H_AND 40))
       ((*default* -60)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39)
        (OP_H_AND 40))
       ((*default* *error*)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_TERN_ELSE 85)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* -62)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39)
        (OP_H_AND 40)
        (OP_H_ERR 41)
        (OP_H_OR 42)
        (OP_TERN_THEN 43))
       ((*default* -64)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39)
        (OP_H_AND 40)
        (OP_H_ERR 41)
        (OP_H_OR 42)
        (OP_TERN_THEN 43)
        (OP_L_AND 44))
       ((*default* -63)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39)
        (OP_H_AND 40)
        (OP_H_ERR 41)
        (OP_H_OR 42)
        (OP_TERN_THEN 43)
        (OP_L_AND 44))
       ((*default* -8)
        (SEMICOLON 47)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* -9)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37))
       ((*default* -32))
       ((*default* -39))
       ((*default* -29) (PARENS_L 87))
       ((*default* -42) (EMARK 89))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -6))
       ((*default* -27)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 95)
        (LEXVAR 7)
        (COMMA 94)
        (PARENS_L 6)
        (BRACKET_L 5)
        (SPLICE_ARRAY 23)
        (SPLICE_HASH 93)
        (OP_L_OR 60)
        (OP_L_ERR 59)
        (OP_L_AND 58)
        (OP_L_NOT 92)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -45))
       ((*default* -41))
       ((*default* -29) (PARENS_L 87))
       ((*default* -47)
        (OP_METHOD_REF 32)
        (OP_METHOD_CALL 33)
        (OP_H_MATH 34)
        (OP_MINUS 35)
        (OP_PLUS 36)
        (OP_CONCAT 37)
        (OP_COMPARE 38)
        (OP_EQUAL 39)
        (OP_H_AND 40)
        (OP_H_ERR 41)
        (OP_H_OR 42)
        (OP_TERN_THEN 43))
       ((*default* -15)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -26))
       ((*default* -69) (COLON -11))
       ((*default* -23)
        (COLON 105)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* *error*) (PARENS_R 106))
       ((*default* -25) (COMMA 107))
       ((*default* -22))
       ((*default* -21))
       ((*default* -20))
       ((*default* *error*) (COLON 108))
       ((*default* -46))
       ((*default* -19)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -28))
       ((*default* -27)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 95)
        (LEXVAR 7)
        (COMMA 94)
        (PARENS_L 6)
        (BRACKET_L 5)
        (SPLICE_ARRAY 23)
        (SPLICE_HASH 93)
        (OP_L_OR 60)
        (OP_L_ERR 59)
        (OP_L_AND 58)
        (OP_L_NOT 92)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 10)
        (FLOAT 9)
        (BAREWORD 8)
        (LEXVAR 7)
        (PARENS_L 6)
        (BRACKET_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -17)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32))
       ((*default* -24))
       ((*default* -16)
        (OP_L_OR 46)
        (OP_L_ERR 45)
        (OP_L_AND 44)
        (OP_TERN_THEN 43)
        (OP_H_OR 42)
        (OP_H_ERR 41)
        (OP_H_AND 40)
        (OP_EQUAL 39)
        (OP_COMPARE 38)
        (OP_CONCAT 37)
        (OP_PLUS 36)
        (OP_MINUS 35)
        (OP_H_MATH 34)
        (OP_METHOD_CALL 33)
        (OP_METHOD_REF 32)))
    (vector
      '((21 . 11)
        (20 . 12)
        (19 . 13)
        (18 . 14)
        (14 . 15)
        (4 . 16)
        (2 . 17)
        (1 . 18))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 19) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 20) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 21) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 22) (14 . 15) (4 . 16))
      '((21 . 11)
        (20 . 12)
        (19 . 13)
        (18 . 25)
        (14 . 15)
        (13 . 26)
        (12 . 27)
        (7 . 28)
        (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 29) (14 . 15) (4 . 16))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 48))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((21 . 11) (20 . 12) (19 . 13) (18 . 51) (14 . 15) (4 . 16))
      '()
      '()
      '()
      '()
      '()
      '()
      '((21 . 11) (20 . 12) (19 . 13) (18 . 55) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 56) (14 . 15) (4 . 16))
      '((21 . 62) (15 . 63) (5 . 64))
      '((21 . 62) (15 . 65) (5 . 64))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 66) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 67) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 68) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 69) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 70) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 71) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 72) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 73) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 74) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 75) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 76) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 77) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 78) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 79) (14 . 15) (4 . 16))
      '()
      '((21 . 11) (20 . 12) (19 . 13) (18 . 80) (14 . 15) (4 . 16))
      '()
      '()
      '()
      '((21 . 11)
        (20 . 12)
        (19 . 13)
        (18 . 25)
        (14 . 15)
        (13 . 81)
        (12 . 27)
        (7 . 28)
        (4 . 16))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((16 . 83))
      '()
      '((16 . 84))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 86))
      '()
      '()
      '()
      '((11 . 88))
      '((17 . 90))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 91) (14 . 15) (4 . 16))
      '()
      '((21 . 11)
        (20 . 12)
        (19 . 13)
        (18 . 96)
        (14 . 15)
        (10 . 97)
        (9 . 98)
        (8 . 99)
        (7 . 100)
        (6 . 101)
        (5 . 102)
        (4 . 16))
      '()
      '()
      '((11 . 103))
      '()
      '((21 . 11) (20 . 12) (19 . 13) (18 . 22) (14 . 15) (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 104) (14 . 15) (4 . 16))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((21 . 11) (20 . 12) (19 . 13) (18 . 109) (14 . 15) (4 . 16))
      '()
      '((21 . 11)
        (20 . 12)
        (19 . 13)
        (18 . 96)
        (14 . 15)
        (10 . 110)
        (9 . 98)
        (8 . 99)
        (7 . 100)
        (6 . 101)
        (5 . 102)
        (4 . 16))
      '((21 . 11) (20 . 12) (19 . 13) (18 . 111) (14 . 15) (4 . 16))
      '()
      '()
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 1 (make-document $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 1 (make-document '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 2 (cons (make-statement $1) $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 2 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (cons (make-statement $2) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (combine-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 7 (make-array-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 8 (make-hash-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 10 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 10 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 11 (make-arguments $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 11 (make-arguments '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 12 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 12 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 13 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 13 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 13 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 13 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 14 (make-array $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 15 (identifier->string $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 15 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 16 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 16 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 17 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 17 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 18 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 18 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 18 (make-method-ref $2 $1 $3 $4 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($6 (vector-ref ___stack (- ___sp 1)))
               ($5 (vector-ref ___stack (- ___sp 3)))
               ($4 (vector-ref ___stack (- ___sp 5)))
               ($3 (vector-ref ___stack (- ___sp 7)))
               ($2 (vector-ref ___stack (- ___sp 9)))
               ($1 (vector-ref ___stack (- ___sp 11))))
          (___push 6 18 (make-method-call $2 $1 $3 $4 $5 $6))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 18 (make-ternary-operator $2 $1 $3 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-assign $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-assign/sc $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 18 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 18 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 18 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 18 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 18 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 19 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 20 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 20 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 20 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 20 (make-bareword $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 20 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 20 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 21 (make-lexical-variable $1)))))))

