(require-extension lalr-driver)
(define parser
  (lr-driver
    '#(((*default* -3)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -63))
       ((*default* -60))
       ((*default* -62))
       ((*default* -61))
       ((*default* -59) (OP_ASSIGN_SC -57) (OP_ASSIGN -57))
       ((*default* -36))
       ((*default* *error*) (OP_ASSIGN 23) (OP_ASSIGN_SC 22))
       ((*default* -8)
        (SEMICOLON 38)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24))
       ((*default* -37) (OP_EQUAL 40))
       ((*default* -2))
       ((*default* *error*) (*eoi* 41))
       ((*default* -44) (OP_METHOD_CALL 24))
       ((*default* -45) (OP_METHOD_CALL 24) (OP_H_MATH 25))
       ((*default* -42)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28))
       ((*default* -43) (OP_METHOD_CALL 24))
       ((*default* *error*)
        (PARENS_R 42)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (BAREWORD 49)
        (LEXVAR 6)
        (OP_L_OR 48)
        (OP_L_ERR 47)
        (OP_L_AND 46)
        (OP_L_NOT 45))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -7)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -4))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -58))
       ((*default* -41)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30)
        (OP_H_AND 31)
        (OP_H_ERR 32)
        (OP_H_OR 33)
        (OP_TERN_THEN 34))
       ((*default* -40)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30)
        (OP_H_AND 31)
        (OP_H_ERR 32)
        (OP_H_OR 33)
        (OP_TERN_THEN 34))
       ((*default* -15))
       ((*default* -14))
       ((*default* -13))
       ((*default* -12))
       ((*default* -11))
       ((*default* -31))
       ((*default* -33) (QMARK 68))
       ((*default* -30))
       ((*default* -46) (OP_METHOD_CALL 24))
       ((*default* -47) (OP_METHOD_CALL 24) (OP_H_MATH 25))
       ((*default* -48) (OP_METHOD_CALL 24) (OP_H_MATH 25))
       ((*default* -49)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27))
       ((*default* -50)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28))
       ((*default* -10)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28))
       ((*default* -51)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30))
       ((*default* -53)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30)
        (OP_H_AND 31))
       ((*default* -52)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30)
        (OP_H_AND 31))
       ((*default* *error*)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_TERN_ELSE 70)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24))
       ((*default* -54)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30)
        (OP_H_AND 31)
        (OP_H_ERR 32)
        (OP_H_OR 33)
        (OP_TERN_THEN 34))
       ((*default* -56)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30)
        (OP_H_AND 31)
        (OP_H_ERR 32)
        (OP_H_OR 33)
        (OP_TERN_THEN 34)
        (OP_L_AND 35))
       ((*default* -55)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30)
        (OP_H_AND 31)
        (OP_H_ERR 32)
        (OP_H_OR 33)
        (OP_TERN_THEN 34)
        (OP_L_AND 35))
       ((*default* -8)
        (SEMICOLON 38)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24))
       ((*default* -9)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28))
       ((*default* -32))
       ((*default* -35) (EMARK 72))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -6))
       ((*default* -34))
       ((*default* -29) (PARENS_L 75))
       ((*default* -39)
        (OP_METHOD_CALL 24)
        (OP_H_MATH 25)
        (OP_MINUS 26)
        (OP_PLUS 27)
        (OP_CONCAT 28)
        (OP_COMPARE 29)
        (OP_EQUAL 30)
        (OP_H_AND 31)
        (OP_H_ERR 32)
        (OP_H_OR 33)
        (OP_TERN_THEN 34))
       ((*default* -27)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 81)
        (LEXVAR 6)
        (COMMA 80)
        (PARENS_L 5)
        (SPLICE_ARRAY 79)
        (SPLICE_HASH 78)
        (OP_L_OR 48)
        (OP_L_ERR 47)
        (OP_L_AND 46)
        (OP_L_NOT 77)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -38))
       ((*default* -15)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -26))
       ((*default* -60) (COLON -11))
       ((*default* -23)
        (COLON 91)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24))
       ((*default* *error*) (PARENS_R 92))
       ((*default* -25) (COMMA 93))
       ((*default* -22))
       ((*default* -21))
       ((*default* -20))
       ((*default* *error*) (COLON 94))
       ((*default* -19)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24))
       ((*default* -18)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -28))
       ((*default* -27)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 81)
        (LEXVAR 6)
        (COMMA 80)
        (PARENS_L 5)
        (SPLICE_ARRAY 79)
        (SPLICE_HASH 78)
        (OP_L_OR 48)
        (OP_L_ERR 47)
        (OP_L_AND 46)
        (OP_L_NOT 77)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* *error*)
        (INT 9)
        (FLOAT 8)
        (BAREWORD 7)
        (LEXVAR 6)
        (PARENS_L 5)
        (OP_L_NOT 4)
        (EMARK 3)
        (OP_PLUS 2)
        (OP_MINUS 1))
       ((*default* -17)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24))
       ((*default* -24))
       ((*default* -16)
        (OP_L_OR 37)
        (OP_L_ERR 36)
        (OP_L_AND 35)
        (OP_TERN_THEN 34)
        (OP_H_OR 33)
        (OP_H_ERR 32)
        (OP_H_AND 31)
        (OP_EQUAL 30)
        (OP_COMPARE 29)
        (OP_CONCAT 28)
        (OP_PLUS 27)
        (OP_MINUS 26)
        (OP_H_MATH 25)
        (OP_METHOD_CALL 24)))
    (vector
      '((18 . 10) (17 . 11) (16 . 12) (15 . 13) (4 . 14) (2 . 15) (1 . 16))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 17) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 18) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 19) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 20) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 21) (4 . 14))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 39))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((18 . 10) (17 . 11) (16 . 12) (15 . 43) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 44) (4 . 14))
      '((18 . 50) (12 . 51) (5 . 52))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 53) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 54) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 55) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 56) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 57) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 58) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 59) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 60) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 61) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 62) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 63) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 64) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 65) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 66) (4 . 14))
      '()
      '((18 . 10) (17 . 11) (16 . 12) (15 . 67) (4 . 14))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((13 . 69))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((3 . 71))
      '()
      '()
      '((14 . 73))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 74) (4 . 14))
      '()
      '()
      '((11 . 76))
      '()
      '((18 . 10)
        (17 . 11)
        (16 . 12)
        (15 . 82)
        (10 . 83)
        (9 . 84)
        (8 . 85)
        (7 . 86)
        (6 . 87)
        (5 . 88)
        (4 . 14))
      '()
      '((18 . 10) (17 . 11) (16 . 12) (15 . 20) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 89) (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 90) (4 . 14))
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '()
      '((18 . 10) (17 . 11) (16 . 12) (15 . 95) (4 . 14))
      '()
      '((18 . 10)
        (17 . 11)
        (16 . 12)
        (15 . 82)
        (10 . 96)
        (9 . 84)
        (8 . 85)
        (7 . 86)
        (6 . 87)
        (5 . 88)
        (4 . 14))
      '((18 . 10) (17 . 11) (16 . 12) (15 . 97) (4 . 14))
      '()
      '()
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 1 (make-document $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 1 (make-document '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 2 (cons (make-statement $1) $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 2 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (cons (make-statement $2) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (combine-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-equality-operations $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-identifier $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 (make-named-value $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 7 (make-array-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 8 (make-hash-splice $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 9 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 10 (cons $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 10 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 10 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 11 (make-arguments $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 11 (make-arguments '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 12 (identifier->string $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 12 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 13 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 13 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 14 #t)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 14 #f)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 15 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 15 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($6 (vector-ref ___stack (- ___sp 1)))
               ($5 (vector-ref ___stack (- ___sp 3)))
               ($4 (vector-ref ___stack (- ___sp 5)))
               ($3 (vector-ref ___stack (- ___sp 7)))
               ($2 (vector-ref ___stack (- ___sp 9)))
               ($1 (vector-ref ___stack (- ___sp 11))))
          (___push 6 15 (make-method-call $2 $1 $3 $4 $5 $6))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($5 (vector-ref ___stack (- ___sp 1)))
               ($4 (vector-ref ___stack (- ___sp 3)))
               ($3 (vector-ref ___stack (- ___sp 5)))
               ($2 (vector-ref ___stack (- ___sp 7)))
               ($1 (vector-ref ___stack (- ___sp 9))))
          (___push 5 15 (make-ternary-operator $2 $1 $3 $5))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-assign $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-assign/sc $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 15 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 15 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 15 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 15 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 15 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 16 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 17 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 17 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 17 (make-bareword $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 17 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 17 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 18 (make-lexical-variable $1)))))))

