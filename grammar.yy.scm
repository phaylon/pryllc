(require-extension lalr-driver)
(define parser
  (lr-driver
    '#(((*default* -3) (INT 4) (FLOAT 3) (BAREWORD 2) (OP_L_NOT 1))
       ((*default* *error*) (INT 4) (FLOAT 3) (BAREWORD 2) (OP_L_NOT 1))
       ((*default* -14))
       ((*default* -16))
       ((*default* -15))
       ((*default* -9))
       ((*default* -8) (SEMICOLON 13) (OP_L_OR 12) (OP_L_ERR 11) (OP_L_AND 10))
       ((*default* -2))
       ((*default* *error*) (*eoi* 15))
       ((*default* -10))
       ((*default* *error*) (INT 4) (FLOAT 3) (BAREWORD 2) (OP_L_NOT 1))
       ((*default* *error*) (INT 4) (FLOAT 3) (BAREWORD 2) (OP_L_NOT 1))
       ((*default* *error*) (INT 4) (FLOAT 3) (BAREWORD 2) (OP_L_NOT 1))
       ((*default* -7) (INT 4) (FLOAT 3) (BAREWORD 2) (OP_L_NOT 1))
       ((*default* -4))
       ((*default* -1) (*eoi* accept))
       ((*default* -11))
       ((*default* -13) (OP_L_AND 10))
       ((*default* -12) (OP_L_AND 10) (OP_L_ERR 11))
       ((*default* -8) (SEMICOLON 13) (OP_L_OR 12) (OP_L_ERR 11) (OP_L_AND 10))
       ((*default* -6)))
    (vector
      '((5 . 5) (4 . 6) (2 . 7) (1 . 8))
      '((5 . 5) (4 . 9))
      '()
      '()
      '()
      '()
      '((3 . 14))
      '()
      '()
      '()
      '((5 . 5) (4 . 16))
      '((5 . 5) (4 . 17))
      '((5 . 5) (4 . 18))
      '((5 . 5) (4 . 19))
      '()
      '()
      '()
      '()
      '()
      '((3 . 20))
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 1 (make-document $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 1 (make-document '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 2 (cons (make-statement $1) $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 2 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 3 (cons (make-statement $2) $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* () (___push 0 3 '())))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 4 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 4 (make-unary-operator $1 $2 'prefix))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 4 (make-binary-operator $2 $1 $3))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-bareword $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-number $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 5 (make-number $1)))))))

